text             = text2$description,
stringsAsFactors = FALSE)
#x$text <- txt_clean_word2vec(x$text, tolower=TRUE)
emb <- as.data.frame(doc2vec(model, x$text,  split = " ",type = "embedding"))%>%
drop_na()
View(emb)
release_emb<-cbind(text2,emb)
release_emb<-cbind(text2,emb)%>%left_join(release)
ls(release_emb)
foo<- release_emb %>% select(year, 18:118)
foo<- release_emb %>% select(year, 23:128)
foo<- release_emb %>% select(year, 23:123)
foo<- release_emb %>% select(id, year, 3:103)
foo<- release_emb %>% select(id, year, 3:104)
ls(foo)
foo<- release_emb %>% select(id, year, 4:105)
ls(foo)
foo<- release_emb %>% select(id, year, 3:104)
ls(foo)
foo<- release_emb %>% select(id, year, 3:103)
foo<- release_emb %>% select(id, year, 3:103) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
foo<- release_emb %>%
select(id, year, 3:103) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
foo<- release_emb %>%
select(id, year, 4:103) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
ls(foo)
foo<- release_emb %>%
select(id, year, 5:103) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
rm(release)
release_emb<-cbind(text2,emb)%>%left_join(release)
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
gc()
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
rm(text1)
gc()
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
rm(style)
release_emb<-cbind(text2,emb)%>%
left_join(release)
#tools
#packages
library(tidyverse)
library(ggrepel)
library(word2vec)
library(doc2vec)
library(fastcluster) #pour aller plus vite en hc
library(Rtsne)
library(scales)
library(zoo)
library(jtools)
# pour ggplot
breaks = c(1900, 1910, 1920,1930,1940,1950,
1960,1970,1980,1990,2000,2010,2020)
#  les couleurs des genres . Y-a-il une conventions ?
col_genre<-c("blue4","coral4","skyblue","purple" , "darkturquoise","darkgreen",
"orange1","orange3","dodgerblue4","darkred","black","deeppink2","limegreen","red3","grey")
col_format=c("brown4",  "skyblue1", "skyblue2", "skyblue3","grey","cyan",  "grey30")
col_pays= c("black", "green3","green1","lightblue1", "yellow", "lightblue2", "orange1", "lightblue4", "dodgerblue3", "dodgerblue1", "dodgerblue2","green2","lightblue3", "white", "green4", "orange2", "orange3", "blue3", "blue4")
theme_set(theme_minimal())
t1<-Sys.time()
release<-read.csv("./dataarchives/release_work.csv")%>%
select(-X)
style<- read_csv("dataarchives/release_style2.txt")%>% #pb encodage
rename(id=1) %>%
mutate(category="Style") %>% mutate(style=tolower(style),
style=str_replace_all(style," ",""),
style=str_replace_all(style,"-",""))
genre<- read_csv("dataarchives/release_genre.csv")%>%
mutate(genre=str_replace_all(genre,"[:punct:]",""),
genre=str_replace_all(genre," ","")) %>%
rename(id=1,style=genre) %>%
mutate(category="Genre")
t2<-Sys.time()
t=t2-t1
foo<- style %>%
group_by(id)%>%
summarise(n_style=n())
ggplot(foo,aes(x=n_style))+  labs(x="Nombre de styles", y="Nombre d'éditions")+
geom_histogram(binwidth = 1, fill="skyblue3")+
scale_fill_manual(values=c("skyblue3", "skyblue1")) +
#   scale_x_continuous(breaks = breaks, limits = c(1940, 2020))+
scale_y_continuous(label=comma,trans="log10")+
scale_x_continuous(label=comma , breaks =c(10,20,30,40,50,60,70,80,90,100))
ggsave(filename="./images/genre10.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
foo2<- release%>%
left_join(foo)%>%
group_by(year,version)%>%
summarise(n_style_m=mean(n_style, na.rm=TRUE),
n_style_d=sd(n_style, na.rm=TRUE))
ggplot(foo2,aes(x=year,y=n_style_m,group=version))+
labs(x=NULL, y="Nombre de styles")+
geom_ribbon(aes(ymin = n_style_m - n_style_d/40,
ymax = n_style_m + n_style_d/40,
fill=version), alpha=.5)+
scale_fill_manual(values=c("skyblue3", "skyblue1")) +
#   scale_x_continuous(breaks = breaks, limits = c(1940, 2020))+
scale_y_continuous(breaks=c(1.2,1.4, 1.6, 1.8, 2), limits = c(1.2,2.2))+
scale_x_continuous( breaks =breaks,limits = c(1940,2020))
ggsave(filename="./images/genre11.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
foo<- style %>%
group_by(style)%>%
summarise(n_release=n())%>%
arrange(desc(n_release))%>%
mutate(rank=rank(n_release, ties.method='random'),
sum=cumsum(n_release))
ggplot(foo,aes(x=604-rank,y=sum))+
labs(x="rang des styles", y="Nombre d'éditions")+
geom_area(fill="skyblue3")+
scale_y_continuous(label=comma )+
scale_x_continuous()
ggsave(filename="./images/genre12.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
foo2<-foo %>%filter(n_release>20000)
library(ggwordcloud)
set.seed(42)
ggplot(foo2, aes(label = style, size = n_release)) +
geom_text_wordcloud() +
theme_minimal()
ggsave(filename="./images/genre13.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
text1<-rbind(genre,style) %>%
left_join(release)%>%
filter(version=="Original") %>%
select(id,title, pays2, date, style,category)
vocab<-text1 %>%
group_by(style)%>%
summarise(n=n())
text2<-text1 %>%
group_by(id) %>%
summarise(description = paste(style, collapse = " "))
write.csv(text2, "./dataarchives/text2.csv")
#text3<- txt_clean_word2vec(text2, ascii = TRUE, alpha = FALSE, tolower = FALSE, trim = TRUE)
#on vectorise
t1<-Sys.time()
set.seed(123456789)
model <- word2vec(x = text2$description,
type = "skip-gram",
window = 8,
dim = 100,
iter = 100,
threads = 4L,
min_count = 10L,
verbose=TRUE)
t2<-Sys.time()
t_2= t2-t1
embedding <- as.matrix(model)
#on sauvegarde le model pour des usages ultérieurs
write.csv(embedding, "./dataarchives/embedding.csv")
path <- "./dataarchives/mymodel.bin"
write.word2vec(model, file = path)
model <- read.word2vec(path)
embedding <- as.matrix(model)
#test sur le genre Rock
lookslike <- predict(model, c("hiphop"), type = "nearest", top_n = 20)
lookslike
#on typologise des termes
library(fastcluster) #pour aller plus vite
k=25
distance<-as.dist(1 - cor(t(embedding)))
arbre <- hclust(distance, method = "ward.D2")
plot(arbre,  xlab = "", ylab = "", sub = "", axes = FALSE, hang = -1)
rect.hclust(arbre,k, border = "green3")
group<- as.data.frame(cutree(arbre, k = k))
group<- group %>%
rownames_to_column(var="style")%>%
rename(group=2) %>%
left_join(vocab, by="style")
library(ggwordcloud)
ggplot(group, aes(label = style, size = log10(n), color=n)) +
geom_text_wordcloud_area(area_corr = TRUE) +
scale_size_area(max_size = 3) +
facet_wrap(vars(group), ncol=5)
ggsave(filename="cluster_word.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
tsne_out <- Rtsne(embedding,perplexity = 8, dim=2) # Run TSNE
tsne_out2<-as.data.frame(tsne_out$Y)
#lemma<-rownames(embedding)
tsne_out3<-cbind(tsne_out2,group) %>%
left_join(vocab) %>% filter(n>4)
c25 <- c(
"dodgerblue2", "#E31A1C", # red
"green4",
"#6A3D9A", # purple
"#FF7F00", # orange
"black", "gold1",
"skyblue2", "#FB9A99", # lt pink
"palegreen2",
"#CAB2D6", # lt purple
"#FDBF6F", # lt orange
"gray70", "khaki2",
"maroon", "orchid1", "deeppink1", "blue1", "steelblue4",
"darkturquoise", "green1", "yellow4", "yellow3",
"darkorange4", "brown"
)
library(ggrepel)
tsne_out3%>%
ggplot(aes(x=V1, y=V2, label=style))+
geom_text_repel(aes(label=ifelse(n>14,style,""),size=n,color=as.factor(group)),max.overlaps=20)+
labs(title="Projection 2D du vocabulaire vectorisé des 110 articles 'NLP & Marketing' ",
subtitle="Pipe : annot. syntax -> word2vec: 200 vecteurs-> hclus ->rtsne",
x= NULL, y=NULL)+
scale_color_manual(values=c25) +
theme(legend.position = "none")
ggsave(filename="vector_word.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
#titre<-UD %>%group_by
x      <- data.frame(doc_id           = text2$id,
text             = text2$description,
stringsAsFactors = FALSE)
#x$text <- txt_clean_word2vec(x$text, tolower=TRUE)
emb <- as.data.frame(doc2vec(model, x$text,  split = " ",type = "embedding"))%>%
drop_na()
release_emb<-cbind(text2,emb)%>%left_join(release)
rm(text1)
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
gc()
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
rm(text1)
rm(style)
rm(text2)
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
rm(release)
rm(genre)
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
rm(emb)
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
#tools
#packages
library(tidyverse)
library(ggrepel)
library(word2vec)
library(doc2vec)
library(fastcluster) #pour aller plus vite en hc
library(Rtsne)
library(scales)
library(zoo)
library(jtools)
# pour ggplot
breaks = c(1900, 1910, 1920,1930,1940,1950,
1960,1970,1980,1990,2000,2010,2020)
#  les couleurs des genres . Y-a-il une conventions ?
col_genre<-c("blue4","coral4","skyblue","purple" , "darkturquoise","darkgreen",
"orange1","orange3","dodgerblue4","darkred","black","deeppink2","limegreen","red3","grey")
col_format=c("brown4",  "skyblue1", "skyblue2", "skyblue3","grey","cyan",  "grey30")
col_pays= c("black", "green3","green1","lightblue1", "yellow", "lightblue2", "orange1", "lightblue4", "dodgerblue3", "dodgerblue1", "dodgerblue2","green2","lightblue3", "white", "green4", "orange2", "orange3", "blue3", "blue4")
theme_set(theme_minimal())
t1<-Sys.time()
release<-read.csv("./dataarchives/release_work.csv")%>%
select(-X)
gc()
gc()
#tools
#packages
library(tidyverse)
library(ggrepel)
library(word2vec)
library(doc2vec)
library(fastcluster) #pour aller plus vite en hc
library(Rtsne)
library(scales)
library(zoo)
library(jtools)
# pour ggplot
breaks = c(1900, 1910, 1920,1930,1940,1950,
1960,1970,1980,1990,2000,2010,2020)
#  les couleurs des genres . Y-a-il une conventions ?
col_genre<-c("blue4","coral4","skyblue","purple" , "darkturquoise","darkgreen",
"orange1","orange3","dodgerblue4","darkred","black","deeppink2","limegreen","red3","grey")
col_format=c("brown4",  "skyblue1", "skyblue2", "skyblue3","grey","cyan",  "grey30")
col_pays= c("black", "green3","green1","lightblue1", "yellow", "lightblue2", "orange1", "lightblue4", "dodgerblue3", "dodgerblue1", "dodgerblue2","green2","lightblue3", "white", "green4", "orange2", "orange3", "blue3", "blue4")
theme_set(theme_minimal())
t1<-Sys.time()
release<-read.csv("./dataarchives/release_work.csv")%>%
select(-X)
style<- read_csv("dataarchives/release_style2.txt")%>% #pb encodage
rename(id=1) %>%
mutate(category="Style") %>% mutate(style=tolower(style),
style=str_replace_all(style," ",""),
style=str_replace_all(style,"-",""))
genre<- read_csv("dataarchives/release_genre.csv")%>%
mutate(genre=str_replace_all(genre,"[:punct:]",""),
genre=str_replace_all(genre," ","")) %>%
rename(id=1,style=genre) %>%
mutate(category="Genre")
t2<-Sys.time()
t=t2-t1
foo<- style %>%
group_by(id)%>%
summarise(n_style=n())
ggplot(foo,aes(x=n_style))+  labs(x="Nombre de styles", y="Nombre d'éditions")+
geom_histogram(binwidth = 1, fill="skyblue3")+
scale_fill_manual(values=c("skyblue3", "skyblue1")) +
#   scale_x_continuous(breaks = breaks, limits = c(1940, 2020))+
scale_y_continuous(label=comma,trans="log10")+
scale_x_continuous(label=comma , breaks =c(10,20,30,40,50,60,70,80,90,100))
ggsave(filename="./images/genre10.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
foo2<- release%>%
left_join(foo)%>%
group_by(year,version)%>%
summarise(n_style_m=mean(n_style, na.rm=TRUE),
n_style_d=sd(n_style, na.rm=TRUE))
ggplot(foo2,aes(x=year,y=n_style_m,group=version))+
labs(x=NULL, y="Nombre de styles")+
geom_ribbon(aes(ymin = n_style_m - n_style_d/40,
ymax = n_style_m + n_style_d/40,
fill=version), alpha=.5)+
scale_fill_manual(values=c("skyblue3", "skyblue1")) +
#   scale_x_continuous(breaks = breaks, limits = c(1940, 2020))+
scale_y_continuous(breaks=c(1.2,1.4, 1.6, 1.8, 2), limits = c(1.2,2.2))+
scale_x_continuous( breaks =breaks,limits = c(1940,2020))
ggsave(filename="./images/genre11.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
foo<- style %>%
group_by(style)%>%
summarise(n_release=n())%>%
arrange(desc(n_release))%>%
mutate(rank=rank(n_release, ties.method='random'),
sum=cumsum(n_release))
ggplot(foo,aes(x=604-rank,y=sum))+
labs(x="rang des styles", y="Nombre d'éditions")+
geom_area(fill="skyblue3")+
scale_y_continuous(label=comma )+
scale_x_continuous()
ggsave(filename="./images/genre12.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
foo2<-foo %>%filter(n_release>20000)
library(ggwordcloud)
set.seed(42)
ggplot(foo2, aes(label = style, size = n_release)) +
geom_text_wordcloud() +
theme_minimal()
ggsave(filename="./images/genre13.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
text1<-rbind(genre,style) %>%
left_join(release)%>%
filter(version=="Original") %>%
select(id,title, pays2, date, style,category)
vocab<-text1 %>%
group_by(style)%>%
summarise(n=n())
text2<-text1 %>%
group_by(id) %>%
summarise(description = paste(style, collapse = " "))
write.csv(text2, "./dataarchives/text2.csv")
#text3<- txt_clean_word2vec(text2, ascii = TRUE, alpha = FALSE, tolower = FALSE, trim = TRUE)
#on vectorise
t1<-Sys.time()
set.seed(123456789)
model <- word2vec(x = text2$description,
type = "skip-gram",
window = 8,
dim = 100,
iter = 100,
threads = 4L,
min_count = 10L,
verbose=TRUE)
t2<-Sys.time()
t_2= t2-t1
embedding <- as.matrix(model)
#on sauvegarde le model pour des usages ultérieurs
write.csv(embedding, "./dataarchives/embedding.csv")
path <- "./dataarchives/mymodel.bin"
write.word2vec(model, file = path)
model <- read.word2vec(path)
embedding <- as.matrix(model)
#test sur le genre Rock
lookslike <- predict(model, c("hiphop"), type = "nearest", top_n = 20)
lookslike
#on typologise des termes
library(fastcluster) #pour aller plus vite
k=25
distance<-as.dist(1 - cor(t(embedding)))
arbre <- hclust(distance, method = "ward.D2")
plot(arbre,  xlab = "", ylab = "", sub = "", axes = FALSE, hang = -1)
rect.hclust(arbre,k, border = "green3")
group<- as.data.frame(cutree(arbre, k = k))
group<- group %>%
rownames_to_column(var="style")%>%
rename(group=2) %>%
left_join(vocab, by="style")
library(ggwordcloud)
ggplot(group, aes(label = style, size = log10(n), color=n)) +
geom_text_wordcloud_area(area_corr = TRUE) +
scale_size_area(max_size = 3) +
facet_wrap(vars(group), ncol=5)
ggsave(filename="cluster_word.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
tsne_out <- Rtsne(embedding,perplexity = 8, dim=2) # Run TSNE
tsne_out2<-as.data.frame(tsne_out$Y)
#lemma<-rownames(embedding)
tsne_out3<-cbind(tsne_out2,group) %>%
left_join(vocab) %>% filter(n>4)
c25 <- c(
"dodgerblue2", "#E31A1C", # red
"green4",
"#6A3D9A", # purple
"#FF7F00", # orange
"black", "gold1",
"skyblue2", "#FB9A99", # lt pink
"palegreen2",
"#CAB2D6", # lt purple
"#FDBF6F", # lt orange
"gray70", "khaki2",
"maroon", "orchid1", "deeppink1", "blue1", "steelblue4",
"darkturquoise", "green1", "yellow4", "yellow3",
"darkorange4", "brown"
)
library(ggrepel)
tsne_out3%>%
ggplot(aes(x=V1, y=V2, label=style))+
geom_text_repel(aes(label=ifelse(n>14,style,""),size=n,color=as.factor(group)),max.overlaps=20)+
labs(title="Projection 2D du vocabulaire vectorisé des 110 articles 'NLP & Marketing' ",
subtitle="Pipe : annot. syntax -> word2vec: 200 vecteurs-> hclus ->rtsne",
x= NULL, y=NULL)+
scale_color_manual(values=c25) +
theme(legend.position = "none")
ggsave(filename="vector_word.jpeg", plot=last_plot(), width = 27, height = 18, units = "cm")
#titre<-UD %>%group_by
x      <- data.frame(doc_id           = text2$id,
text             = text2$description,
stringsAsFactors = FALSE)
#x$text <- txt_clean_word2vec(x$text, tolower=TRUE)
emb <- as.data.frame(doc2vec(model, x$text,  split = " ",type = "embedding"))%>%
drop_na()
release_emb<-cbind(text2,emb)%>%left_join(release)
rm(text1)
rm(style)
rm(text2)
rm(release)
rm(genre)
rm(emb)
foo<- release_emb %>%
select(id, year, 3:102) %>%
pivot_longer(-c(id,year), names_to = "embedding", values_to = "coord")
foo<- release_emb %>%
select(id, year, 3:102) %>%
group_by(year)%>%
summarise(across(starts_with(V1:V100), ~ mean(.x, na.rm = TRUE)))
foo<- release_emb %>%
select(id, year, 3:102) %>%
group_by(year)%>%
summarise(across(3:102, ~ mean(.x, na.rm = TRUE)))
foo<- release_emb %>%
select(id, year, 3:102) %>%
group_by(year)%>%
summarise(across(3:101, ~ mean(.x, na.rm = TRUE)))
foo<- release_emb %>%
select(id, year, 3:102) %>%
group_by(year)%>%
summarise(across(2:101, ~ mean(.x, na.rm = TRUE)))
foo<- release_emb %>%
select(id, year, 3:102) %>%
group_by(year)%>%
summarise(across(2:101, ~ mean(.x, na.rm = TRUE)))%>%
column_to_rownames(var="year")
foo<- release_emb %>%
select(id, year, 3:102) %>%
group_by(year)%>%
summarise(across(2:101, ~ mean(.x, na.rm = TRUE)))%>%
mutate(year=ifelse(is.na(year),0, year))%>%
column_to_rownames(var="year")
foo<- release_emb %>%
select(id, year, 3:102) %>%
group_by(year)%>%
summarise(across(2:101, ~ mean(.x, na.rm = TRUE)))%>%
filter(year>1939 & year>2021)  column_to_rownames(var="year")
foo<- release_emb %>%
select(id, year, 3:102) %>%
group_by(year)%>%
summarise(across(2:101, ~ mean(.x, na.rm = TRUE)))%>%
filter(year>1939 & year>2021)%>%column_to_rownames(var="year")
res.pca<-PCA(X, scale.unit = FALSE, ncp = 5, graph = TRUE)
res.pca<-PCA(foo, scale.unit = FALSE, ncp = 5, graph = TRUE)
library(FactoMineR)
res.pca<-PCA(foo, scale.unit = FALSE, ncp = 5, graph = TRUE)
rw<-cor(foo)
rw
res.pca<-PCA(foo, ncp = 5, graph = TRUE)
foo<- release_emb %>%
select(id, year, 3:102) %>%
group_by(year)%>%
summarise(across(2:101, ~ mean(.x, na.rm = TRUE)))%>%
filter(year>1939 & year<2021)%>%column_to_rownames(var="year")
library(factoextra)
library(FactoMineR)
res.pca<-PCA(foo, ncp = 5, graph = TRUE)
eig.val <- get_eigenvalue(res.pca)
eig.val
fviz_pca_ind (res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Évite le chevauchement de texte
)
res.pca<-PCA(foo, ncp = 5, graph = TRUE)
View(embedding)
